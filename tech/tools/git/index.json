[{"content":"主定理 令 $a\\geqslant 1$ 和 $b\u0026gt;1$ 是常数，$f(n)$ 是一个函数，$T(n)$ 是定义在非负整数上的递归式：\n$$\nT(n)=aT(n/b)+f(n)\n$$\n情况1：对某个常数 $\\varepsilon\u0026gt;0$\n$$\nf(n)=O(n^{log_ba-\\varepsilon})\\\\\n\\Rightarrow T(n)=\\Theta(n^{log_ba})\n$$\n情况2：$k\\geqslant 0$\n$$\nf(n)=\\Theta(n^{log_ba}lg^kn) \\\\\n\\Rightarrow T(n)=\\Theta(n^{log_ba}lg^{k+1}n)\n$$\n情况3：对某个常数 $\\varepsilon \u0026gt;0$ ，且对某个常数 $c\u0026lt;1$ 和所有足够大的 n 有$af(n/b)\\leqslant cf(n)$\n$$\nf(n)=\\Omega(n^{log_ba+\\varepsilon}) \\\\\n\\Rightarrow T(n)=\\Theta(f(n))\n$$\n矩阵乘法 Strassen 算法 $$\nA=\\left[ \\begin{matrix}\nA_{1,1}\u0026amp;\tA_{1,2}\\\\\nA_{2,1}\u0026amp;\tA_{2,2}\\\\\n\\end{matrix} \\right]\n\\\\\nB=\\left[ \\begin{matrix}\nB_{1,1}\u0026amp;\tB_{1,2}\\\\\nB_{2,1}\u0026amp;\tB_{2,2}\\\\\n\\end{matrix} \\right]\n\\\\\nC=\\left[ \\begin{matrix}\nC_{1,1}\u0026amp;\tC_{1,2}\\\\\nC_{2,1}\u0026amp;\tC_{2,2}\\\\\n\\end{matrix} \\right]\n$$\n$C=A*B$ 得到\n$$\nC_{1,1}=A_{1,1}B_{1,1}+A_{1,2}B_{2,1}\\\\\nC_{1,2}=A_{1,1}B_{1,2}+A_{1,2}B_{2,2}\\\\\nC_{2,1}=A_{2,1}B_{1,1}+A_{2,2}B_{2,1}\\\\\nC_{2,2}=A_{2,1}B_{1,2}+A_{2,2}B_{2,2}\n$$\n通过组合，得到7个新矩阵\n$$\nM_1 = (A_{1,1}+A_{2,2})(B_{1,1}+B_{2,2})\\\\\nM_2 = (A_{2,1}+A_{2,2})B_{1,1} \\\\\nM_3 = A_{1,1}(B_{1,2}-B_{2,2}) \\\\\nM_4 = A_{2,2}(B_{2,1}-B_{1,1}) \\\\\nM_5 = (A_{1,1}+A_{1,2})B_{2,2} \\\\\nM_6 = (A_{2,1}-A_{1,1})(B_{1,1}+B_{1,2}) \\\\\nM_7 = (A_{1,2}-A_{2,2})(B_{2,1}+B_{2,2}) \\\\\n$$\n通过上面7个新矩阵可以得到\n$$\nC_{1,1} = M_1+M_4-M_5+M_7 \\\\\nC_{1,2} = M_3+M_5 \\\\\nC_{2,1} = M_2+M_4\\\\\nC_{2,2} = M_1-M_2+M_3+M_6\n$$\nStrassen 的时间复杂度为 $O(n^{log_27})=O(n^{2.807})$\n通用矩阵的时间复杂度为 $O(n^{log_28})=O(n^3)$\n","description":"","id":0,"section":"courses","tags":null,"title":"分治法","uri":"https://wiki.limxw.com/courses/algorithm/%E5%88%86%E6%B2%BB%E6%B3%95/"},{"content":"初等和：由有限个命题变元或其否定组成的析取式\n初等积：由有限个命题变元或其否定组成的合取式\n最小项 性质   每个最小项只有一个成真赋值\n  最小项的编码：唯一成真赋值作为该最小项的编码\n$$\n\\lnot p \\land \\lnot q :m_{00} \\\\\n\\lnot p \\land q :m_{01} \\\\\np \\land \\lnot q :m_{10} \\\\\np \\land q :m_{11}\n$$\n  当 i ≠ j，$m_i \\land m_j =0$ 不同最小项的合取永假\n  $m_{00} \\lor m_{01} \\lor m_{10} \\lor m_{11} = 1$ 所有最小项的析取永真\n  标准析取范式 定义 每个初等积都是最小项\n最小项按下标递增排列\n求法  消除 $\\to \\leftrightarrow$ 把否定放在每个变元的前面 利用 $\\and$ 对 $\\lor$ 的分配律 $p=p\\and (q\\lor \\lnot q) = (p\\land q)\\lor(p\\land \\lnot q)$ 编码、排序  最大项 性质  每个最大项只有一个成假赋值 最大项的编码：唯一的成假赋值作为编码  $$\n\\lnot p \\land \\lnot q :M_{11} \\\\\n\\lnot p \\land q :M_{10} \\\\\np \\land \\lnot q :M_{01} \\\\\np \\land q :M_{00}\n$$\n 若 $i\\neq j$，则 $M_i \\lor M_j = 1$ 不同最大项的析取永真\n  $M_{00} \\land M_{01} \\land M_{10} \\land M_{11} = 0$ 所有最大项的合取永假\n  $$\n\\lnot m_{00} = \\lnot(\\lnot p \\and \\lnot q) = p \\lor q = M_{00} \\\\\nM_i = \\lnot m_i\n$$\n  标准合取范式 定义 每个初等和都是最大项\n最大项按下标递增排列\n求法  消除 $\\to \\leftrightarrow$ 把否定放在每个变元的前面 利用 $\\lor$ 对 $\\and$ 的分配律 $p=p\\lor (q\\land \\lnot q) = (p\\lor q)\\land(p\\lor \\lnot q)$ 编码、排序  比较 每个初等和都是最大项\n    最小项：初等积 最大项：初等和     个数 n个变元，$2^n$ 个 n个变元，$2^n$ 个   编码 唯一的成真解释作为编码 唯一的成假解释作为编码    变元：1 变元的否定：0 变元：0 变元的否定：1   性质 不同最小项的合取是永假式 不同最大项的析取是永真式    所有最小项的析取是永真式 所有最大项的合取是永假式    永真式的标准析取范式是所有最小项 永真式的标准合取范式是0    永假式的标准析取范式是0 永假式的标准合取范式是所有最大项    标准析取范式中出现的所有最小项的编码是所有的成真解释 标准合取范式中出现的所有最大项的编码是所有的成假解释    异或 $$\na \\oplus b = (\\lnot a \\land b)\\lor(a\\land \\lnot b)\n$$\n   $a$ $b$ $a\\oplus b$     1 0 1   1 1 0   0 0 0   0 1 1    ","description":"","id":1,"section":"courses","tags":null,"title":"命题的范式","uri":"https://wiki.limxw.com/courses/math/%E8%8C%83%E5%BC%8F/"},{"content":"同一线性表必定含有相同特性\n增删改查 CRUD\n顺序存储 = 数组\n","description":"","id":2,"section":"courses","tags":null,"title":"线性表","uri":"https://wiki.limxw.com/courses/structure/linear-table/"},{"content":"瞬时：小的值\n平均：大的值\n","description":"","id":3,"section":"courses","tags":null,"title":"吞吐量","uri":"https://wiki.limxw.com/courses/network/throughput/"},{"content":"基本等价式 双重否定律 $$\n\\lnot\\lnot A = A\n$$\n等幂律 $$\nA \\lor A = A\n$$\n$$\nA \\land A = A\n$$\n交换律 $$\nA \\lor B = B \\lor A\n$$\n$$\nA \\land B = B \\land A\n$$\n结合律 $$\n(A \\lor B) \\lor C = A \\lor(B \\lor C)\n$$\n$$\n(A \\land B) \\land C = A \\land(B \\land C)\n$$\n分配律 $$\nA \\lor (B \\land C) = (A \\lor B) \\land (A \\lor C)\n$$\n$$\nA \\land (B \\lor C) = (A \\land B) \\lor (A \\land C)\n$$\n德摩根律 $$\n\\lnot(A \\lor B) = \\lnot A \\land \\lnot B\n$$\n$$\n\\lnot(A \\land B) = \\lnot A \\lor \\lnot B\n$$\n吸收律 $$\nA \\lor (A \\land B) = A\n$$\n$$\nA \\land(A \\lor B) = A\n$$\n零律 $$\nA \\lor 1 = 1\n$$\n$$\nA \\land 0 =0\n$$\n单位律 $$\nA \\lor 0 = A\n$$\n$$\nA \\land 1 = A\n$$\n否定律 $$\nA \\lor \\lnot A = 1\n$$\n$$\nA \\land \\lnot A = 0\n$$\n蕴含律 $$\nA \\to B = \\lnot A \\lor B\n$$\n等值律 $$\nA \\leftrightarrow B = (A \\to B) \\land (B \\to A)\n$$\n","description":"","id":4,"section":"courses","tags":null,"title":"等价演算","uri":"https://wiki.limxw.com/courses/math/%E7%AD%89%E4%BB%B7%E6%BC%94%E7%AE%97/"},{"content":"注意：带 Mono 后缀的字体为等距字体\nFira Code 带编程连字的等距字体。\n字体名：Fira Code\nGitHub地址：FiraCode\nSource Code Pro 来自 Adobe 的等距编程字体。\nGitHub地址：source-code-pro\nNerd Fonts 包含了 Font Awesome , Devicons , Octicons , and others 的字体图标库，以及超过20个补丁的字体。\nGitHub地址：Nerd Fonts\n官网：https://www.nerdfonts.com/\nFira Code With Nerd Fonts 字体名：FiraCode NF\nGitHub地址：Fira Code Nerd Font\n下载地址：https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip\nSource Code Pro With Nerd Fonts 字体名：SauceCodePro Nerd Font\nGitHub地址：Sauce Code Nerd Font\n下载地址：https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/SourceCodePro.zip\n","description":"","id":5,"section":"tech","tags":null,"title":"Fonts","uri":"https://wiki.limxw.com/tech/tools/fonts/"},{"content":"构建准备 一般要求  Clang or GCC 4.4+ 版本 添加了 TLS/SSL 编译的 CMake 2.8.12+ 版本  Ubuntu / Debian 1  sudo apt-get install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip   在 Ubuntu 16.04 / Debian Jessie 和更高版本中需要安装 libtool-bin\nCentOS / RHEL / Fedora 1  sudo yum -y install ninja-build libtool autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch   Arch Linux 1  sudo pacman -S base-devel cmake unzip ninja   macOS   安装 Xcode 和 Homebrew\n  安装 Xcode commandline tools xcode-select --install\n  安装其他依赖\n1  brew install ninja libtool automake cmake pkg-config gettext     开始编译 1 2 3 4 5 6 7 8 9 10 11 12  # 克隆源码 git clone https://github.com/neovim/neovim.git cd neovim # 切换到 stable 分支 git checkout stable # Release 版 make CMAKE_BUILD_TYPE=Release # 带 Debug 信息的 Release 版 make CMAKE_BUILD_TYPE=RelWithDebInfo sudo make install   ","description":"","id":6,"section":"tech","tags":null,"title":"Neovim","uri":"https://wiki.limxw.com/tech/tools/neovim/"},{"content":"Submodules 添加 1  git submodule add \u0026lt;url\u0026gt;\r  更新 1  git submodule update --remote --merge\r  恢复 克隆一个带 submodule 的 repo 时，通过下面这条命令下载 submodule\n1  git submodule update --init --recursive\r  删除 1 2 3 4 5 6 7 8  # 删除 submodule 目录及源码\rrm -rf \u0026lt;submodule_folder\u0026gt;\r# 删除 submodule 目录\rrm -rf .git/module/\u0026lt;your_submodule\u0026gt;\r# 删除 .gitmodules 中 submodule 相关条目\rvim .gitmodules\r# 删除配置项中 submodule 相关条目\rvim .git/config\r  分支 查看 1  git branch -a\r  创建并切换 1  git checkout -b \u0026lt;branch\u0026gt;\r  切换 1  git checkout master\r  删除 本地分支 1  git branch -d \u0026lt;branch\u0026gt;\r  远程分支 1  git push origin --delete \u0026lt;branch\u0026gt;\r  合并 1  git merge \u0026lt;branch\u0026gt;\r  标签 创建 1  git tag \u0026lt;tagname\u0026gt; \u0026lt;commit\u0026gt;\r  替换本地改动 即恢复文件到上一次 commit\n1  git check -- \u0026lt;filename\u0026gt;\r  丢弃本地所有改动和提交\n1 2  git fetch origin\rgit reset --hard origin/master\r  一些指南 图解Git\n","description":"记录一些比较有用的Git命令","id":7,"section":"tech","tags":null,"title":"Git","uri":"https://wiki.limxw.com/tech/tools/git/"}]